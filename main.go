package main

import (
	red "TelegramBot/Redis"
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	logrusRotate "github.com/LazarenkoA/LogrusRotate"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	session "TelegramBot/Confs"
	n "TelegramBot/Net"
	tel "TelegramBot/TelegramTasks"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"

	"github.com/sirupsen/logrus"
)


type ngrokAPI struct {
	Tunnels []*struct {
		PublicUrl string `json:"public_url"`
	} `json:"tunnels"`
}
type RotateConf struct {
}
type Hook struct {
}

func (h *Hook) Levels() []logrus.Level {
	return []logrus.Level{logrus.ErrorLevel, logrus.PanicLevel}
}
func (h *Hook) Fire(en *logrus.Entry) error {
	log.Println(en.Message)
	return nil
}

/* type settings struct {
	BinPath       string                          `json:"BinPath"`
	Extensions    *cf.ExtensionsSettings          `json:"Extensions"`
	Configuration *cf.ConfigurationCommonSettings `json:"Configuration"`
} */

var (
	pass     string
	LogLevel int
	help bool
)

func init()  {
	flag.StringVar(&pass, "SetPass", "", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è")
	flag.IntVar(&LogLevel, "LogLevel", 3, "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç 2 –¥–æ 5, –≥–¥–µ 2 - –æ—à–∏–±–∫–∞, 3 - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, 4 - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, 5 - –¥–µ–±–∞–≥")
	flag.BoolVar(&help, "help", false, "–ü–æ–º–æ—â—å")
}

func main() {
	var err error

	flag.Parse()
	if help {
		flag.Usage()
		return
	}

	lw := new(logrusRotate.Rotate).Construct()
	defer lw.Start(LogLevel, new(RotateConf))()
	logrus.SetFormatter(&logrus.JSONFormatter{})
	logrus.AddHook(new(Hook))

	fmt.Printf("%-50v", "–ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
	Tasks := new(tel.Tasks)
	if err = Tasks.ReadSettings(); err == nil {
		fmt.Println("–û–ö")
	} else {
		fmt.Println("FAIL")
		logrus.Errorf("%v", err)
		return
	}
	fmt.Printf("%-50v", "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
	fmt.Println(LogLevel)

	tel.Confs.DIContainer.Provide(func() (*red.Redis, error) {
		return new(red.Redis).Create(tel.Confs.Redis)
	})

	fmt.Printf("%-50v", "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ redis")
	err = tel.Confs.DIContainer.Invoke(func(r *red.Redis) {
		Tasks.SessManager = new(session.SessionManager).NewSessionManager(r)
	})
	if err == nil {
		fmt.Println("–û–ö")
	} else {
		fmt.Println("FAIL")
		logrus.WithError(err).Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è redis –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
	}

	if pass != "" {
		Tasks.SetPass(pass)
		fmt.Println("–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return
	}

	fmt.Printf("%-50v", "–ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ngrok")
	var WebhookURL string
	if WebhookURL, err = getNgrokURL(); err == nil {
		fmt.Println("–û–ö")
	} else {
		fmt.Println("FAIL")
		logrus.Errorf("%v", err)
		return
	}

	fmt.Printf("%-50v", "–°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞")
	bot := NewBotAPI(WebhookURL)
	if bot == nil {
		logrus.Panic("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
		return
	}
	logrus.Debug("–ö –±–æ—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å")
	fmt.Println("–û–ö")

	/* info, _ := bot.GetWebhookInfo()
	fmt.Println(info) */

	http.HandleFunc("/Debug", func(w http.ResponseWriter, r *http.Request) {
		//ioutil.ReadAll(r.Body)
		//defer r.Body.Close()

		fmt.Fprintln(w, "–ö–æ–Ω–µ–∫—Ç –µ—Å—Ç—å")
	})

	updates := bot.ListenForWebhook("/")
	if net := tel.Confs.Network; net != nil {
		go http.ListenAndServe(":"+net.ListenPort, nil)
		//go http.ListenAndServeTLS(":"+net.ListenPort, "webhook_cert.pem", "webhook_pkey.key", nil) // –¥–ª—è SSL
		logrus.Info("–°–ª—É—à–∞–µ–º –ø–æ—Ä—Ç " + net.ListenPort)
	} else {
		logrus.Panic("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ListenPort")
		return
	}

	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
	tf := new(tel.TaskFactory)
	mu := new(sync.Mutex) // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

	// –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ updates
	for update := range updates {
		var Command string

		//update.Message.Photo[0].FileID
		//p := tgbotapi.NewPhotoShare(update.Message.Chat.ID, update.Message.Photo[0].FileID)
		//bot.GetFile(p)
		if !authorization(&update, bot, Tasks) {
			continue
		}


		//	fmt.Println(update.Message.Text)
		if update.CallbackQuery != nil {
			existNew := false
			for _, t := range Tasks.GetTasks(update.CallbackQuery.From.ID) {
				if t.GetState() != tel.StateDone {
					callback := t.GetCallBack()
					call := callback[update.CallbackQuery.Data]
					if call != nil {
						call()
					}
					existNew = true
				}
			}
			if !existNew {
				bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."))
			}
			continue
		}

		if update.Message == nil {
			continue
		}

		Command = update.Message.Command()
		logrus.WithFields(logrus.Fields{
			"Command":   Command,
			"Msg":       update.Message.Text,
			"FirstName": update.Message.From.FirstName,
			"LastName":  update.Message.From.LastName,
			"UserName":  update.Message.From.UserName,
			"ChatID":    update.Message.Chat.ID,
		}).Debug()

		fromID := update.Message.From.ID
		// –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
		Tasks.Delete(fromID)

		var task tel.ITask
		switch Command {
		case "start":
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç %v %v!", update.Message.From.FirstName, update.Message.From.LastName)))
		case "buildcf":
			task = Tasks.AppendTask(tf.BuildCf(), Command, fromID, false)
		case "buildcfe":
			task = Tasks.AppendTask(tf.BuildCfe(), Command, fromID, false)
		//case "changeversion":
		//task = Tasks.AppendTask(new(tel.ChangeVersion), Command, fromID, false)
		case "buildanduploadcf":
			task = Tasks.AppendTask(tf.BuilAndUploadCf(), Command, fromID, false)
		case "buildanduploadcfe":
			task = Tasks.AppendTask(tf.BuilAndUploadCfe(), Command, fromID, false)
		case "getlistupdatestate":
			task = Tasks.AppendTask(tf.GetListUpdateState(), Command, fromID, true)
		case "setplanupdate":
			task = Tasks.AppendTask(tf.SetPlanUpdate(), Command, fromID, false)
		case "invokeupdate":
			task = Tasks.AppendTask(tf.IvokeUpdate(), Command, fromID, false)
		case "deployextension":
			task = Tasks.AppendTask(tf.DeployExtension(mu), Command, fromID, false)
		case "ivokeupdateactualcfe":
			task = Tasks.AppendTask(tf.IvokeUpdateActualCFE(), Command, fromID, false)
		case "disablezabbixmonitoring":
			task = Tasks.AppendTask(tf.DisableZabbixMonitoring(), Command, fromID, false)
		case "sui":
			task = Tasks.AppendTask(tf.SUI(), Command, fromID, false)
		case "charts":
			task = Tasks.AppendTask(tf.Charts(), Command, fromID, false)
		case "cancel":
			//Tasks.Reset(fromID, bot, &update, true)
			//bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ì–æ—Ç–æ–≤–æ!"))
		case "sendmsg":
			task = Tasks.AppendTask(tf.SendMsg(), Command, fromID, false)
		default:
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —Ö—É–∫–∏
			if Tasks.ExecuteHook(&update) {
				continue
			}

			// –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
			messageID := update.Message.MessageID
			message := update.Message
			go func() {
				var msg tgbotapi.MessageConfig
				if err := saveFile(message, bot); err != nil {
					msg = tgbotapi.NewMessage(message.Chat.ID, "–Ø —Ç–∞–∫–æ–º—É –Ω–µ–æ–±—É—á–µ–Ω–Ω—ã–π.")
					msg.ReplyToMessageID = messageID
				} else {
					msg = tgbotapi.NewMessage(message.Chat.ID, "üëçüèª")
					msg.ReplyToMessageID = messageID
				}
				bot.Send(msg)
			}()
		}

		if task != nil {
			// –≥–æ—Ä—É—Ç–∏–Ω–∞ –Ω—É–∂–Ω–∞ –∏–∑-–∑–∞ Lock
			go func() {
				task.Lock(func() {
					txt := fmt.Sprintf("K–æ–º–∞–Ω–¥–∞ %q —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –º–æ–≥—É—Ç). –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã", task.GetName())
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, txt))
				})

				// if race.Enabled {
				// 	bot.Send(tgbotapi.NewMessage(task.GetChatID(), fmt.Sprintf("–ö–æ–¥–∞–Ω–¥–∞ %q —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π.\n –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã", task.GetName())))
				// }
				task.InfoWrapper(task.Initialise(bot, &update, func() {
					task.SetState(tel.StateDone)
					msg := tgbotapi.NewMessage(task.GetChatID(), fmt.Sprintf("–ó–∞–¥–∞–Ω–∏–µ:\n%v\n–ì–æ—Ç–æ–≤–æ!", task.GetDescription()))
					msg.ReplyToMessageID = task.CurrentStep().GetMessageID()
					bot.Send(msg)

					Tasks.Delete(fromID)
					task.Unlock()
				}))
			}()
		}
	}
}

func authorization(update *tgbotapi.Update, bot *tgbotapi.BotAPI, Tasks *tel.Tasks) bool  {
	if update.Message == nil {
		return true // –≤–æ—Ç —Ç–∞–∫–æ–µ –¥–æ–ø—É—â–µ–Ω–∏–µ
	}

	User := update.Message.From
	var redis *red.Redis
	tel.Confs.DIContainer.Invoke(func(r *red.Redis) {
		redis = r
	})

	if (update.Message.Command() != "" && update.Message.Command() != "start") || update.Message.Text != "" {

		if ok := Tasks.CheckSession(User, update.Message.Text); !ok {
			if Tasks.CheckPass(User, update.Message.Text) {
				// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				if redis == nil {
					return false
				}

				redis.AppendItems("users", User.UserName)
				redis.SetMap(User.UserName, map[string]string{
					"UserName": User.UserName,
					"FirstName": User.FirstName,
					"LastName": User.LastName,
					"ChatID": strconv.FormatInt(update.Message.Chat.ID, 10),
				})

				// —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
				for _, v := range redis.Items("imgMSG") {
					ChatIDstr, _ := redis.Get(v)
					ChatID, _ :=  strconv.ParseInt(ChatIDstr, 10, 64)
					MessageID, _ :=  strconv.Atoi(v)

					bot.DeleteMessage(tgbotapi.DeleteMessageConfig{
						ChatID: ChatID,
						MessageID: MessageID})

					redis.DeleteItems("imgMSG", v)
				}

				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "üßû‚Äç‚ôÇ —Å–ª—É—à–∞—é—Å—å –∏ –ø–æ–≤–∏–Ω—É—é—Å—å."))
				return false // —ç—Ç–æ —Å–ø–µ—Ü–æ–º, —á—Ç–æ –±—ã –≤—ã—à–µ continue –≤—ã–∑–≤–∞–ª—Å—è
			}

			currentDir, _ := os.Getwd()
			imgPath := filepath.Join(currentDir, "img", "notLogin.png")
			if _, err := os.Stat(imgPath); os.IsNotExist(err) {
				m, _ := bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å"))
				redis.Set(strconv.Itoa(m.MessageID), strconv.FormatInt(update.Message.Chat.ID, 10), 0)
				redis.AppendItems ("imgMSG", strconv.Itoa(m.MessageID))
			} else {
				// –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ NewDocumentUpload
				msg := tgbotapi.NewPhotoUpload(update.Message.Chat.ID, imgPath)
				quote := getQuote()
				if quote == "" {
					quote = "ü§∑üèª‚Äç‚ôÇÔ∏è —Ü–∏–∞—Ç—É –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª"
				}

				msg.Caption = quote
				msg.ParseMode = "HTML"
				m, _ := bot.Send(msg)
				redis.Set(strconv.Itoa(m.MessageID), strconv.FormatInt(update.Message.Chat.ID, 10), 0)
				redis.AppendItems ("imgMSG", strconv.Itoa(m.MessageID))
			}
			return false
		}
	}

	return true
}

func getQuote() string {
	netU := new(n.NetUtility).Construct("https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=ru", "", "")
	if response, err := netU.CallHTTP(http.MethodGet, time.Second*5, nil); err != nil {
		return ""
	} else {
		m := map[string]string{}
		if err := json.Unmarshal([]byte(response), &m); err != nil {
			return ""
		}
		return fmt.Sprintf("%q\n<i>%v</i>", m["quoteText"], m["quoteAuthor"])
	}
}

func getNgrokURL() (string, error) {
	if net := tel.Confs.Network; net != nil && net.UseNgrok {
		// —Ñ–∞–π–ª Ngrok –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º –±–æ—Ç–∞
		currentDir, _ := os.Getwd()
		ngrokpath := filepath.Join(currentDir, "ngrok.exe")
		if _, err := os.Stat(ngrokpath); os.IsNotExist(err) {
			return "", fmt.Errorf("–§–∞–π–ª ngrok.exe –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}

		err := make(chan error, 0)
		result := make(chan string, 0)

		// –≥–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ngrok
		go func(chanErr chan<- error) {
			cmd := exec.Command(ngrokpath, "http", net.ListenPort)
			err := cmd.Run()
			if err != nil {
				errText := fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:\n err:%v \n", err.Error())

				if cmd.Stderr != nil {
					if stderr := cmd.Stderr.(*bytes.Buffer).String(); stderr != "" {
						errText += fmt.Sprintf("StdErr:%v", stderr)
					}
				}
				chanErr <- fmt.Errorf(errText)
				close(chanErr)
			}
		}(err)

		// –≥–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
		go func(result chan<- string, chanErr chan<- error) {
			// –∑–∞–¥—É–º–∫–∞ —Ç–∞–∫–∞—è, –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ –≤—ã—à–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç Ngrok, –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–µ–±—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 4040
			// –∏ —è –º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å url —á–µ—Ä–µ–∑ api. –û–¥–Ω–∞–∫–æ, –≤ —Ç–µ–∫—É—â–µ–π –≥–æ—Ä—É—Ç–∏–Ω–µ —è –Ω–µ –∑–Ω–∞—é —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç —Ç–∞–º Ngrok –∏–ª–∏ –Ω–µ—Ç, –ø–æ —ç—Ç–æ–º—É —Ç–∞–π–º–µ—Ä
			// –ø—Ä–æ–¥—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è 5 —Ä–∞–∑ (5 —Å–µ–∫) –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—à–∏–±–∫–∞.
			tryCount := 5
			timer := time.NewTicker(time.Second * 1)
			for range timer.C {
				resp, err := http.Get("http://localhost:4040/api/tunnels")
				if (err == nil && !(resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusIMUsed)) || err != nil {
					if tryCount--; tryCount <= 0 {
						chanErr <- fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ngrok")
						close(chanErr)
						timer.Stop()
						return
					}
					continue
				}
				body, _ := ioutil.ReadAll(resp.Body)
				resp.Body.Close()

				var ngrok = new(ngrokAPI)
				err = json.Unmarshal(body, &ngrok)
				if err != nil {
					chanErr <- err
					close(chanErr)
					timer.Stop()
					return
				}
				if len(ngrok.Tunnels) == 0 {
					chanErr <- fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—É–Ω–µ–ª–∏ ngrok")
					close(chanErr)
					timer.Stop()
					return
				}
				for _, url := range ngrok.Tunnels {
					if strings.Index(strings.ToLower(url.PublicUrl), "https") >= 0 {
						result <- url.PublicUrl
						close(result)
						timer.Stop()
						return
					}

				}
				chanErr <- fmt.Errorf("–ù–µ –Ω–∞—à–ª–∏ https —Ç—É–Ω–µ–ª—å ngrok")
				close(chanErr)
			}
		}(result, err)

		select {
		case e := <-err:
			return "", e
		case r := <-result:
			return r, nil
		}

	} else if net.WebhookURL != "" {
		return net.WebhookURL, nil
	} else {
		return "", fmt.Errorf("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±–ª–æ–∫ Network –∏–ª–∏ WebhookURL")
	}

	return "", nil
}

func saveFile(message *tgbotapi.Message, bot *tgbotapi.BotAPI) (err error) {
	downloadFilebyID := func(FileID string) {
		var file tgbotapi.File
		if file, err = bot.GetFile(tgbotapi.FileConfig{FileID}); err == nil {
			_, fileName := path.Split(file.FilePath)

			netU := new(n.NetUtility).Construct(file.Link(tel.Confs.BotToken), "", "")
			netU.Conf = tel.Confs
			err = netU.DownloadFile(path.Join("InFiles", fileName))
		}
	}

	if message.Video != nil {
		downloadFilebyID(message.Video.FileID)
	} else if message.Photo != nil {
		photos := *message.Photo
		// –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å–∞–º–æ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ—Ä–µ–º –µ–≥–æ
		downloadFilebyID(photos[len(photos)-1].FileID)
	} else if message.Audio != nil {
		downloadFilebyID(message.Audio.FileID)
	} else if message.Voice != nil {
		downloadFilebyID(message.Voice.FileID)
	} else if message.Document != nil {
		downloadFilebyID(message.Document.FileID)
	} else {
		return fmt.Errorf("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
	}

	return err
}

func NewBotAPI(WebhookURL string) *tgbotapi.BotAPI {

	bot, err := tgbotapi.NewBotAPIWithClient(tel.Confs.BotToken, n.GetHttpClient(tel.Confs))
	if err != nil {
		logrus.Errorf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %q", err)
		return nil
	}
	logrus.Debug("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—É–∫ –Ω–∞ URL " + WebhookURL)

	//_, err = bot.SetWebhook(tgbotapi.NewWebhookWithCert(net.WebhookURL, "webhook_cert.pem"))
	_, err = bot.SetWebhook(tgbotapi.NewWebhook(WebhookURL))
	if err != nil {
		logrus.Errorf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–± —Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞: %q", err)
		return nil
	}

	//bot.Debug = true
	return bot
}

///////////////// RotateConf ////////////////////////////////////////////////////
func (w *RotateConf) LogDir() string {
	currentDir, _ := os.Getwd()
	return filepath.Join(currentDir, "Logs")
}
func (w *RotateConf) FormatDir() string {
	return "02.01.2006"
}
func (w *RotateConf) FormatFile() string {
	return "15"
}
func (w *RotateConf) TTLLogs() int {
	return 12
}
func (w *RotateConf) TimeRotate() int {
	return 1
}


// –î–õ–Ø –ü–ê–ü–´
/*
buildcfe - –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π *.cfe
buildcf - –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ *.cf
buildanduploadcf - –°–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞
buildanduploadcfe - –°–æ–±—Ä–∞—Ç—å –§–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞
setplanupdate - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
getlistupdatestate - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
invokeupdate - –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è jenkins –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
ivokeupdateactualcfe - –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ jenkins
deployextension - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ú–°, –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ –≤ –≤–µ—Ç–∫–∏ Dev, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ jenkins
disablezabbixmonitoring - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ zabbix –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
charts - –ì—Ä–∞—Ñ–∏–∫–∏
sui - —Ä–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏ (—Å–æ–∑–¥–∞—Ç—å, –∑–∞–∫—Ä—ã—Ç—å)
//cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
*/

// go build -o "bot.exe" -ldflags "-s -w"